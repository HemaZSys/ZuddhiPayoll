
@model First.Models.PayslipGradeHeader
@{
    ViewBag.Title = "PayslipEntry";
    List<First.Models.Emp> Employeelist = ViewBag.employees as List<First.Models.Emp>;
    List<First.Models.Empalldropdown> PaymentModeList = ViewBag.PaymentMode;
    string section = "";
}

<html>
<head>
    <style>
        #Month, .td1TotalDeduction, .td1TotalGrossPay, .td1TotalNetPay {
            pointer-events: none;
        }

        .container {
            padding: 30px;
            background-color: white;
        }

        #PaymentModeid {
            width: 81px;
        }

        .textbox {
            width: 100%;
            text-align: right;
            padding-right: 10px;
        }

        .txtbox {
            text-align: right;
            padding-right: 10px;
        }

        table table-hover {
            border-collapse: collapse;
            border-spacing: 0;
            width: 50%;
            border: 1px solid #7e6d90;
        }

        table td {
            line-height: 25px;
        }

            table td:first-child {
                padding-left: 10px;
            }

        table th {
            background-color: #7e6d90;
            line-height: 30px;
            color: #fff;
        }

        th {
            vertical-align: bottom;
            text-align: center;
        }

        td span {
            -ms-writing-mode: tb-rl;
            /*-webkit-writing-mode: vertical-rl;*/
            writing-mode: vertical-rl;
            transform: rotate(180deg);
            white-space: nowrap;
        }

        input[type='text'], input[type='number'] {
            text-align: right;
        }


        .clsGrossPay {
            width: 150px;
        }

        #EmployeeGrosspay, #LeavesTaken {
            text-align: left;
        }

        #tblHeader td {
            font-size: 12pt;
            padding: 0px 3px;
            line-height: 16px;
        }

            #tblHeader td:last-child {
                padding-bottom: 7px;
            }

        #tblTotals td {
            border: 1px solid black;
        }
    </style>

</head>
<body>
    @using (Html.BeginForm("UpdatePayslipDetails", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div class="container" style="width: 70%" id="PrintPDF">
            <div style="border: 1px solid black;">
                <div style="font-size:15pt;font-weight:bold;text-align:left;">
                    <div class="row">
                        <div class="col-lg-3" style="text-align: center;">
                            <img src="~/images/zlogo.png" style="width: 90px; padding-top: 12px;" />
                        </div>
                        <div class="col-lg-6">
                            <h2 style="text-align: center; font-family: Garamond;"><b>@Model.CompanyName</b></h2>
                            <p style="text-align: center; font-size: 12pt; font-family: Garamond; ">No 2, Sri Nagar, 5th Street, Narayanapuram,<br />Pallikaranai, Chennai - 600 100, India</p>
                        </div>
                        <div class="col-lg-3">

                        </div>
                    </div>
                </div>
            </div>

            <table style="width: 100%; border: 1px solid black; border-top:none;">
                <tr>
                    <td colspan="4" style="border-bottom: 1px solid black;">
                        <div style=" font-size: 18pt; font-weight: bold; text-align: center; padding: 10px 0px; font-family: Garamond;">


                            Salary for the month of
                            <label id="lblPayslipMonth">@Html.DisplayFor(Model => Model.MonthYear)</label>
                            @Html.HiddenFor(Model => Model.MonthYear)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 25%; padding-left: 10px; padding-top: 10px;"><H5>Employee Id:</H5></td>
                    <td style="padding-top:3px;width:20%;">
                        <H5><b>@Html.DisplayFor(Model => Model.EmployeeId)</b></H5>
                    </td>
                    <td style="width: 25%;"><H5>Month Days:</H5></td>
                    <td style="padding-top:3px;width:30%;">
                        <H5>
                            <b>
                                <label id="lblMonthDays">All</label>
                            </b>
                        </H5>
                    </td>

                </tr>
                <tr>
                    <td style="width: 25%; padding-left: 10px; "><H5>Employee Name:</H5></td>
                    <td style="padding-top:3px;width:30%;" id="txtEmpName">
                        <H5>
                            <b>
                                @Html.DisplayFor(model => model.EmployeeName)
                                @Html.HiddenFor(model => model.EmployeeName)
                                @Html.HiddenFor(model => model.EmployeeId)
                                @Html.HiddenFor(model => model.EmpId)
                            </b>
                        </H5>
                    </td>

                    <td style="width:25%;"><H5>Leaves Taken:</H5></td>
                    <td style="padding-top:3px;width:30%;">
                        <H5>
                            <b>
                                @Html.TextBoxFor(model => Model.LeavesTaken, "{0:n2}", new { @class = "txtbox", type = "number", id = "txtLeavesTaken", style = "text-align:left;font-weight:bold", maxlength = "2", min = "0", max = "31" })
                            </b>
                        </H5>
                    </td>
                </tr>
                <tr>
                    <td style="width: 25%; padding-left: 10px;"><H5>Designation:</H5></td>
                    <td style="padding-top:3px;width:30%;">
                        <H5><b>@Html.DisplayFor(model => model.Designation)</b></H5>
                    </td>
                    <td>
                        <H5>LOP:</H5>
                    </td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>@Html.TextBoxFor(model => Model.LOP, "{0:n2}", new { @class = "txtbox", type = "number", id = "txtLOP", style = "text-align:left;font-weight:bold", maxlength = "2", min = "0", max = "31" })</b>
                        </H5>
                    </td>
                </tr>
                <tr>
                    <td style="width: 25%; padding-left: 10px;"><H5>Department:</H5></td>
                    <td style="padding-top:3px;width:30%;">
                        <H5><b>@Html.DisplayFor(model => model.Department)</b></H5>
                    </td>
                    <td><H5>Gross Pay:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @Html.DisplayFor(Model => Model.EmployeeGrosspay, new { type = "number", style = "font-weight:bold", @class = "clsGrossPay" })
                                @Html.HiddenFor(Model => Model.EmployeeGrosspay)
                            </b>
                        </H5>
                    </td>

                </tr>
                <tr>
                    <td style="width: 25%; padding-left: 10px;"><H5>Location:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @Html.DisplayFor(model => model.Location)
                            </b>
                        </H5>
                    </td>
                    <td><H5>Payment Mode:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @Html.DropDownListFor(model => model.PaymentModeid, new SelectList(PaymentModeList, "Id", "description"), new { style = "font-weight:bold;color:black;" })

                            </b>
                        </H5>
                    </td>
                </tr>
                <tr>
                    <td><H5>DOB:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @DateTime.Parse(Html.DisplayFor(model => model.DOB).ToString()).ToShortDateString()

                            </b>
                        </H5>
                    </td>
                    <td><H5>DOJ:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>

                                @DateTime.Parse(Html.DisplayFor(model => model.DateofJoin).ToString()).ToShortDateString()

                            </b>
                        </H5>
                    </td>

                </tr>
                <tr>

                    <td style="width: 25%; padding-left: 10px;"><H5>Employee Grade:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @Html.DisplayFor(model => model.EmployeeGrade)
                                @Html.HiddenFor(model => model.EmployeeGrade)
                                @Html.HiddenFor(model => model.EmployeeGradeID)
                            </b>
                        </H5>
                    </td>
                    <td><H5>PF Account No:</H5></td>
                    <td style="padding-top:3px;">
                        <H5>
                            <b>
                                @Html.DisplayFor(model => model.PFAccountNo)

                            </b>
                        </H5>
                    </td>
                </tr>
            </table>


            <div id="divItemCount" style="display:none"> @Model.PayslipGradeEntryList.Count()</div>

            <table style="width: 100%;" table-hover border="1">

                @for (int i = 0; i < Model.PayslipGradeEntryList.Count(); i++)
                {


                    if (section != Model.PayslipGradeEntryList[i].SectionDescription)
                    {
                        <tr>
                            <th style="width:77%;">@Html.DisplayFor(modelItem => Model.PayslipGradeEntryList[i].SectionDescription)</th>

                            <th style="display:none">Annual Amount</th>
                            <th style="width:21%;">Monthly Amount</th>
                        </tr>
                        if (Model.PayslipGradeEntryList[i].SectionDescription == "Deductions")
                        {
                            <div id="divDedCount" style="display:none">@i</div>
                        }

                        section = Model.PayslipGradeEntryList[i].SectionDescription;
                    }

                    <tr class="info">
                        <td style="width:77%;padding-left:10px;">
                            @Html.HiddenFor(modelItem => Model.PayslipGradeEntryList[i].PayslipGradeid)
                            @Html.HiddenFor(modelItem => Model.PayslipGradeEntryList[i].Id)
                            @if (Model.PayslipGradeEntryList[i].Description == "HRA")
                            {
                                Model.PayslipGradeEntryList[i].Description = "House Rent Allowance";
                            }
                            else if (Model.PayslipGradeEntryList[i].Description == "LTA")
                            {
                                Model.PayslipGradeEntryList[i].Description = "Leave Travel Allowance";
                            }
                            else if (Model.PayslipGradeEntryList[i].Description == "PF")
                            {
                                Model.PayslipGradeEntryList[i].Description = "Provident Fund";
                            }
                            @Html.DisplayFor(modelItem => Model.PayslipGradeEntryList[i].Description)
                        </td>

                        <td style="display:none;text-align: right;">
                            @Html.TextBoxFor(modelItem => Model.PayslipGradeEntryList[i].AnnualAmount, "{0:n2}", new { type = "text", style = "text-align:right", @class = "textbox" })
                        </td>
                        <td style="width: 21%; text-align: right; ">
                            @if (Model.PayslipGradeEntryList[i].Percentage > 0)
                            {
                                @Html.TextBoxFor(modelItem => Model.PayslipGradeEntryList[i].MonthlyAmount, "{0:n2}", new { type = "text", style = "text-align:right", @class = "textbox" })
                                @Html.HiddenFor(modelItem => Model.PayslipGradeEntryList[i].Percentage)
                            }
                            else
                            {
                                @Html.TextBoxFor(modelItem => Model.PayslipGradeEntryList[i].fixedAmount, "{0:n2}", new { type = "text", style = "text-align:right", @class = "textbox" })
                                @Html.HiddenFor(modelItem => Model.PayslipGradeEntryList[i].fixedAmount)
                            }


                        </td>
                    </tr>
                }
                <tr>
                    <td style="padding-left:10px;">Gross Salary : </td>
                    <td style="text-align: right; font-weight: bold;" class="clsTotals GrossSalary">@Html.TextBoxFor(Model => Model.GrossSalary, new { type = "number", @class = "td1TotalGrossPay" })</td>
                </tr>
                <tr>
                    <td style="padding-left: 10px;">Total Deductions :</td>
                    <td style="text-align: right; font-weight: bold;" class="clsTotals TotalDeductions">@Html.TextBoxFor(Model => Model.TotalDeductions, new { type = "number", @class = "td1TotalDeduction" })</td>

                </tr>


                <tr>
                    <td style="padding-left: 10px;">Net Salary :</td>
                    <td style="text-align: right; font-weight: bold;" class="clsTotals NetSalary">
                        @Html.TextBoxFor(Model => Model.NetSalary, new { type = "number", @class = "td1TotalNetPay" })
                    </td>
                </tr>
                <tr>
                    <td style="padding-left: 10px;">IT collected till now :</td>
                    <td style="text-align: right; font-weight: bold;" class="clsTotals taxcollected">
                        @Html.TextBoxFor(Model => Model.taxcollected, new { type = "number", @class = "td1TotalIT" })
                    </td>
                </tr>


                <tr>
                    <td id="tdPayMonthWords" colspan="3" style="text-align:center;vertical-align:bottom">
                        000.00
                    </td>

                </tr>
                <tr>
                    <td id="tdNote" colspan="3" style="height:36px;text-align:center;vertical-align:bottom">

                        <i>This is Computer generated Payslip and does not require Signature.</i>
                    </td>

                </tr>
            </table>
        </div>
        <center>

            <table>
                <tr>
                    <td>

                        <input type="submit" value="Save" class="btnRegister" style="margin:10px;padding:3px 10px" />&nbsp;&nbsp;

                        @if (Session["AccessType"] != null && Session["AccessType"].ToString() != "User")
                        {
                            <button type="submit" style="margin:10px;padding:3px 10px" class="registerbtn  float-right">@Html.ActionLink("Back", "Details", "Employee")</button>
                        }
                        else
                        {
                            <button type="submit" style="margin:10px;padding:3px 10px" class="registerbtn  float-right">@Html.ActionLink("Back", "EmployeeDetails", "Employee", new { id = Session["Id"] }, null)</button>
                        }&nbsp;


                        <input type="button" id="btnPrint" value="Print" class="btnRegister" style="display:none;margin:15px 0;width:60px;font-weight:bold;" />&nbsp;&nbsp;
                        @*<input type="button" id="btnPDF" value="Save as PDF" class="btnRegister" style="margin:15px 0;width:60px;font-weight:bold;display:none;" />*@
                        <input type="button" value="Save As PDF" onclick="convertHTMLtoPDF()">&nbsp;&nbsp;
                        <input type="hidden" name="ExportData" />
                        @*<button type="submit" id="btnSubmit1" style="margin:10px;padding:3px 10px" class="registerbtn float-right">@Html.ActionLink("send mail", "UpdatePayslipDetails", "Employee")</button>*@

                    </td>
                    <td>
                        @Html.EditorFor(model => model.isSalaryStructure)

                    </td>
                    <td>
                        &nbsp;&nbsp;Save as Template

                    </td>
                </tr>
            </table>
        </center>
    }
    @*<div class="col-lg-6" style="text-align: center;">
        <button type="button" id="btnSubmit1" onclick="SendEmail()" href="~/Employee/ExportHTML" class="btn btn-primary" width="120px;">send mail</button>
    </div>*@
</body>
</html>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery-ui-1.13.0.min.js"></script>
<script src="~/Js/jquery.validate.min.js"></script>
<script src="~/Js/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>   

<script src="~/savepdfJS/jquery/3.2.1/jquery.min.js"></script>
<script src="~/savepdfJS/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="~/savepdfJS/html2canvas/1.4.1/html2canvas.min.js"></script>

<script type="text/javascript">
    function SendEmail() {
       // alert("Hi");
        //const { jsPDF } = window.jspdf;        
        //html2canvas(document.querySelector('#PrintPDF'),
        //    { scale: 4 }
        //).then(canvas => {
        //    const pdf = new jsPDF('p', 'mm', 'a4');
        //    pdf.addImage(canvas.toDataURL('image/jpeg'), 'JPEG', 0, 0, 211, 298);           
        //});
        pdf.fromHTML('#PrintPDF', 15, 15, { 'width': 170 });
        alert(pdf.output());
        var pdfData = pdf.output();
            //var pdf = new jsPDF();
           
            //pdf.fromHTML(document.querySelector('#PrintPDF'), 15, 15, { 'width': 170 });
            //var pdfData = pdf.output();
            alert(pdfData);
            $.get("/Employee/ExportHTML", {
                htmlcontent: pdfData
            }
                , function (data) { data; });     
    }

    function convertHTMLtoPDF() {       
        const { jsPDF } = window.jspdf;
        const quality = 4 // Higher the better but larger file
        html2canvas(document.querySelector('#PrintPDF'),
            { scale: quality }
        ).then(canvas => {
            const pdf = new jsPDF('p', 'mm', 'a4');
            pdf.addImage(canvas.toDataURL('image/jpeg'), 'JPEG', 0, 0, 211, 298);            
            pdf.save($("#lblPayslipMonth").html() + "_" + $("#EmployeeName").val() + '.pdf');
        });
       
    }
    
</script>

<script type="text/javascript">
    var MonthDays;
    var monthShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var monthNum = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    var monthFull = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    var TotalMonthVal = 0;
    var TotalAnnualVal = 0;
    var TotalIncomeMonthVal = 0;
    var TotalIncomeAnnualVal = 0;

    var TotalDeductionMonthVal = 0;
    var TotalDeductionIncomeAnnualVal = 0;


    $("#EmployeeGrosspay").val($("#EmployeeGrosspay").val().replaceAll(",", ""));
    var grossPay = $("#EmployeeGrosspay");
    grossPay = parseFloat(grossPay);


    $(document).ready(function () {
        checkLogin();

        calcTotals();

        $("input").keyup(function () {
            calcTotals();
        });


        $("#txtLOP").keyup(function () {
            findGross();
        });

        $("#txtLOP").change(function () {
            findGross();
        });

        $("#txtLeavesTaken").keyup(function () {
            validateDays("#txtLeavesTaken");
        });

        $("#txtLeavesTaken").change(function () {
            validateDays("#txtLeavesTaken");
        });

        displayFullMonth();
        //alert(parseFloat($("#txtLeavesTaken").val()));
        $("#txtLeavesTaken").val(parseFloat($("#txtLeavesTaken").val()).toFixed(2));
    });

    function displayFullMonth() {
        var myparts = $("#lblPayslipMonth").html().split("-");
        var fullmon = "";
        if (myparts[1].length == 2)
            fullmon = monthFull[monthNum.indexOf(myparts[1])];
        else
            fullmon = monthFull[monthShort.indexOf(myparts[1])];

        $("#lblPayslipMonth").html(fullmon + "-" + myparts[2]);
    }

    function validateDays(ctrlID)
    {
        if ($(ctrlID).val() > MonthDays) {
            $(ctrlID).val(MonthDays);
        }

        if ($(ctrlID).val() < 0) {
            $(ctrlID).val(0);
        }
    }

    function findGross() {

        validateDays("#txtLOP");


        if ($("#txtLOP").val() > 0) {

            grossPay = $("#EmployeeGrosspay").val().replaceAll(",", "");
            grossPay = parseFloat(grossPay);
            var LOP = parseFloat($("#txtLOP").val());
            grossPay = (grossPay / MonthDays) * (MonthDays - LOP);
            calcFixedSalaray();
        }
        else if ($("#txtLOP").val() == 0) {
            grossPay = $("#EmployeeGrosspay").val().replaceAll(",", "");
            grossPay = parseFloat(grossPay);
            calcFixedSalaray();
        }
    }

    function calcTotals() {
        //alert("calcTotals");
        TotalMonthVal = 0;
        TotalAnnualVal = 0;
        TotalIncomeMonthVal = 0;
        TotalIncomeAnnualVal = 0;
        TotalDeductionMonthVal = 0;
        TotalDeductionIncomeAnnualVal = 0;

        var itemCnt = parseInt($("#divItemCount").html());
        var dedCnt = parseInt($("#divDedCount").html());
        //alert(itemCnt);
        var tmpMonVal = 0;
        var tmpAnnVal = 0;
        for (var a = 0; a < itemCnt; a++) {

            tmpMonVal = $("#PayslipGradeEntryList_" + a + "__MonthlyAmount").val();
            tmpAnnVal = $("#PayslipGradeEntryList_" + a + "__AnnualAmount").val();

            tmpMonVal = tmpMonVal.replaceAll(",", "");
            tmpAnnVal = tmpAnnVal.replaceAll(",", "");

            $("#PayslipGradeEntryList_" + a + "__MonthlyAmount").val(tmpMonVal);
            $("#PayslipGradeEntryList_" + a + "__AnnualAmount").val(tmpAnnVal);

            if (a < dedCnt) {

                TotalIncomeMonthVal += parseFloat(tmpMonVal);
                TotalIncomeAnnualVal += parseFloat(tmpAnnVal);
            }
            else {
                TotalDeductionMonthVal += parseFloat(tmpMonVal);
                TotalDeductionIncomeAnnualVal += parseFloat(tmpAnnVal);
            }

            TotalIncomeMonthVal = Math.ceil(TotalIncomeMonthVal);
            TotalDeductionMonthVal = Math.ceil(TotalDeductionMonthVal);

            TotalMonthVal = TotalIncomeMonthVal - TotalDeductionMonthVal;
            TotalAnnualVal = TotalIncomeAnnualVal - TotalDeductionIncomeAnnualVal;

        }        

        $(".td1TotalGrossPay").val(TotalIncomeMonthVal.toFixed(2));
        $(".td1TotalDeduction").val(TotalDeductionMonthVal.toFixed(2));
        $(".td1TotalNetPay").val(TotalMonthVal.toFixed(2));


        $("#tdPayMonthWords").html("(Rupees " + convertNumberToWords(TotalMonthVal) + " Only.)");
    }

    $(function () {

        if (document.URL.indexOf("view=") > -1)
        {
            var mode = document.URL.split("view=")[1];
            //alert(mode);
            if (mode == "2") {
                $('input[type="number"]').attr('disabled', 'disabled');
                $('input[type="text"]').attr('disabled', 'disabled');
                $('#PaymentModeid').prop('disabled', 'disabled');
                $('#PaymentModeid').css('border', 'none');
                $('#PaymentModeid').css('appearance', 'none');
                $('input[type="number"]').css('border', 'none');
                $('input[type="text"]').css('border', 'none');
                $('input[type="number"]').css('background-color', '#fff');
                $('input[type="text"]').css('background-color', '#fff');
                $("#btnPrint").show();
                //$("#btnPDF").show();
                $("input[type='submit']").hide();
            }
        }


        var PayslipMonth = $("#lblPayslipMonth").html();
        //alert(PayslipMonth);
        var selectedDate = new Date(PayslipMonth);
        //alert(selectedDate);
        MonthDays = findNoOfDays(selectedDate);
        $("#tdMonthDays").html(MonthDays);
        $("#lblMonthDays").html(MonthDays);


       // PayslipMonth = PayslipMonth.substring(3);

        $("#lblPayslipMonth").html(PayslipMonth);


        $("#btnPrint").click(function () {
            $(".GrossSalary").html($("#GrossSalary").val());
            $(".TotalDeductions").html($("#TotalDeductions").val());
            $(".NetSalary").html($("#NetSalary").val());
            $(".taxcollected").html($("#taxcollected").val());

            $("#GrossSalary").hide();
            $("#TotalDeductions").hide();
            $("#NetSalary").hide();
            $("#taxcollected").hide();
            printDiv(".container");
        });

        $("#btnPDF").click(function () {
            createPDF($(".container"));
        });

        var msg = '@ViewData["result"]';
        if (msg == '1') {
            alert("Payslip Details Updated Successfully");
        }

        $("#EmployeeGrosspay").change(function () {

            var grossPay = $("#EmployeeGrosspay").val().replaceAll(",", "");
        grossPay = parseFloat(grossPay);
            //alert("GP ch " + grossPay);
            var Percentage = parseFloat($("#PayslipGradeEntryList_0__Percentage").val());
            var basic = grossPay * Percentage / 100;
            $("#PayslipGradeEntryList_0__MonthlyAmount").val(basic);
            //$("#PayslipGradeEntryList_0__AnnualAmount").val(basic*12);

            Percentage = parseFloat($("#PayslipGradeEntryList_1__Percentage").val());
            var HRA = grossPay * Percentage / 100;
            $("#PayslipGradeEntryList_1__MonthlyAmount").val(HRA);
            //$("#PayslipGradeEntryList_1__AnnualAmount").val(HRA*12);

            var Percentage = parseFloat($("#PayslipGradeEntryList_2__Percentage").val());
            var SA = grossPay * Percentage / 100;
            $("#PayslipGradeEntryList_2__MonthlyAmount").val(SA);
            //$("#PayslipGradeEntryList_2__AnnualAmount").val(SA*12);

        });

        $('#PayslipGradeEntryList_6__MonthlyAmount').change(function (e) {
            //CalcMonthlyamount(e);
            var telephone = $("#PayslipGradeEntryList_6__MonthlyAmount").val();
           // $("#PayslipGradeEntryList_3__AnnualAmount").val(telephone* 12.00);
        });

        $('#PayslipGradeEntryList_4__MonthlyAmount').change(function (e) {
            //CalcMonthlyamount(e);
            var Books = $("#PayslipGradeEntryList_4__MonthlyAmount").val();
           // $("#PayslipGradeEntryList_4__AnnualAmount").val(Books * 12);
        });

        $('#PayslipGradeEntryList_5__MonthlyAmount').change(function (e) {
            //CalcMonthlyamount(e);
            var Food = $("#PayslipGradeEntryList_5__MonthlyAmount").val();
           // $("#PayslipGradeEntryList_5__AnnualAmount").val(Food * 12);
        });



        $("input[type='text']").change(function ()
        {
            $(this).val(formatAmount($(this).val(),2));
        });



        $('input[type="text"]').each(function (i, obj) {
            $(this).val(formatAmount($(this).val(), 2));
        });

        $("#txtLOP").change(function () {
            $(this).val(parseFloat($(this).val()).toFixed(1));
            calcTotals();
        });

        $("input[type='number']").change(function () {

            $(this).val(formatAmount($(this).val(), 2));
        });

        $("input[type='text']").focus(function () {

            $(this).select();

        });

    });

    function formatAmount(amount,intFixed) {
        var txtVal = amount;
        if (txtVal == "")
            txtVal = 0.00;
        txtVal = parseInt(txtVal).toFixed(intFixed);
        return txtVal;
    }

    //INTERNATIONAL RUPEES FORMAT

    function numberToWords(number) {

        var digit = ['ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE'];
        var elevenSeries = ['TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN', 'FIFTEEN', 'SIXTEEN', 'SEVENTEEN', 'EIGHTEEN', 'NINETEEN'];
        var countingByTens = ['TWENTY', 'THIRTY', 'FORTY', 'FIFTY', 'SIXTY', 'SEVENTY', 'EIGHTY', 'NINETY'];
        var shortScale = ['', 'THOUSAND', 'MILLION', 'BILLION', 'TRILLION'];

        number = number.toString(); number = number.replace(/[\, ]/g, ''); if (number != parseFloat(number)) return 'not a number'; var x = number.indexOf('.'); if (x == -1) x = number.length; if (x > 15) return 'too big'; var n = number.split(''); var str = ''; var sk = 0; for (var i = 0; i < x; i++) { if ((x - i) % 3 == 2) { if (n[i] == '1') { str += elevenSeries[Number(n[i + 1])] + ' '; i++; sk = 1; } else if (n[i] != 0) { str += countingByTens[n[i] - 2] + ' '; sk = 1; } } else if (n[i] != 0) { str += digit[n[i]] + ' '; if ((x - i) % 3 == 0) str += 'HUNDRED '; sk = 1; } if ((x - i) % 3 == 1) { if (sk) str += shortScale[(x - i - 1) / 3] + ' '; sk = 0; } } if (x != number.length) { var y = number.length; str += 'POINT '; for (var i = x + 1; i < y; i++) str += digit[n[i]] + ' '; } str = str.replace(/\number+/g, ' '); return str.trim();

    }



    //INDIAN RUPEES FORMAT

    function convertNumberToWords(amount) {
        var words = new Array();
        words[0] = '';
        words[1] = 'One';
        words[2] = 'Two';
        words[3] = 'Three';
        words[4] = 'Four';
        words[5] = 'Five';
        words[6] = 'Six';
        words[7] = 'Seven';
        words[8] = 'Eight';
        words[9] = 'Nine';
        words[10] = 'Ten';
        words[11] = 'Eleven';
        words[12] = 'Twelve';
        words[13] = 'Thirteen';
        words[14] = 'Fourteen';
        words[15] = 'Fifteen';
        words[16] = 'Sixteen';
        words[17] = 'Seventeen';
        words[18] = 'Eighteen';
        words[19] = 'Nineteen';
        words[20] = 'Twenty';
        words[30] = 'Thirty';
        words[40] = 'Forty';
        words[50] = 'Fifty';
        words[60] = 'Sixty';
        words[70] = 'Seventy';
        words[80] = 'Eighty';
        words[90] = 'Ninety';
        amount = amount.toString();
        var atemp = amount.split(".");
        var number = atemp[0].split(",").join("");
        var n_length = number.length;
        var words_string = "";
        if (n_length <= 9) {
            var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var received_n_array = new Array();
            for (var i = 0; i < n_length; i++) {
                received_n_array[i] = number.substr(i, 1);
            }
            for (var i = 9 - n_length, j = 0; i < 9; i++, j++) {
                n_array[i] = received_n_array[j];
            }
            for (var i = 0, j = 1; i < 9; i++, j++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    if (n_array[i] == 1) {
                        n_array[j] = 10 + parseInt(n_array[j]);
                        n_array[i] = 0;
                    }
                }
            }
            value = "";
            for (var i = 0; i < 9; i++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    value = n_array[i] * 10;
                } else {
                    value = n_array[i];
                }
                if (value != 0) {
                    words_string += words[value] + " ";
                }
                if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Crores ";
                }
                if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Lakhs ";
                }
                if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Thousand ";
                }
                if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                    words_string += "Hundred and ";
                } else if (i == 6 && value != 0) {
                    words_string += "Hundred ";
                }
            }
            words_string = words_string.split("  ").join(" ");
        }
        return words_string;
    }



    function printDiv(divName) {
        //alert("pt");
        var divContents = $(divName).html();
        var a = window.open('', '', 'height=auto, width=100%');
        a.document.write('<html>');
        a.document.write('<body >');
        a.document.write(divContents);
        a.document.write('</body></html>');
        a.document.close();
        a.print();
    }


    function findNoOfDays(dt) {

        var arrMonDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var NoOfDays = arrMonDays[dt.getMonth()];

        if (dt.getMonth() == 1) {

            var mon = parseInt(dt.getMonth() + 2);
            var NextMonthDt = new Date(mon + "/" + "1/" + dt.getFullYear());
            NextMonthDt.setDate(NextMonthDt.getDate() + (-1));
            NoOfDays = NextMonthDt.getDate();
            //alert(NoOfDays);
        }

        return NoOfDays;
    }

    //CALC FOR BASIC, HRA, SPECIAL ALLOWANCE FROM GROSS PAY
    function calcFixedSalaray() {

        //alert("cfs");
        //alert(grossPay);
        var Percentage = parseFloat($("#PayslipGradeEntryList_0__Percentage").val());
        var basic = grossPay * Percentage / 100;
        var cumBasic = basic * 12;
        $("#PayslipGradeEntryList_0__MonthlyAmount").val(basic.toFixed(2));
        $("#PayslipGradeEntryList_0__AnnualAmount").val(cumBasic.toFixed(2));
        Percentage = parseFloat($("#PayslipGradeEntryList_1__Percentage").val());

        var HRA = grossPay * Percentage / 100;
        var cumHRA = HRA * 12;
        $("#PayslipGradeEntryList_1__MonthlyAmount").val(HRA.toFixed(2));
        $("#PayslipGradeEntryList_1__AnnualAmount").val(cumHRA.toFixed(2));

        var Percentage = parseFloat($("#PayslipGradeEntryList_2__Percentage").val());
        var SA = grossPay * Percentage / 100;
        var cumSA = SA * 12;
        $("#PayslipGradeEntryList_2__MonthlyAmount").val(SA.toFixed(2));
        $("#PayslipGradeEntryList_2__AnnualAmount").val(cumSA.toFixed(2));

        calcTotals();
    }
 
</script>